#include <iostream>
#include <climits>
using namespace std;

// Function to find the vertex with the minimum distance not yet included in Tset
int minimumDist(int dist[], bool Tset[], int V) {
    int min = INT_MAX, index;
    for (int i = 0; i < V; i++) {
        if (!Tset[i] && dist[i] <= min) {
            min = dist[i];
            index = i;
        }
    }
    return index;
}

// Dijkstra's algorithm to find the shortest path from the source to all vertices
void Dijkstra(int graph[6][6], int src, int V) {
    int dist[V];   // Array to store the shortest distance from the source
    bool Tset[V];  // Boolean array to mark visited vertices

    for (int i = 0; i < V; i++) {
        dist[i] = INT_MAX;
        Tset[i] = false;
    }

    dist[src] = 0; // Distance of the source vertex from itself is 0

    for (int i = 0; i < V - 1; i++) {
        int m = minimumDist(dist, Tset, V); // Get the vertex with the minimum distance
        Tset[m] = true;

        for (int v = 0; v < V; v++) {
            if (!Tset[v] && graph[m][v] && dist[m] != INT_MAX && dist[m] + graph[m][v] < dist[v]) {
                dist[v] = dist[m] + graph[m][v];
            }
        }
    }

    cout << "Vertex\t\tDistance from Source\n";
    for (int i = 0; i < V; i++) {
        char str = 65 + i; // Convert to ASCII for printing A, B, C...
        cout << str << "\t\t\t" << dist[i] << endl;
    }
}

int main() {
    int V = 6; // Number of vertices
    int graph[6][6] = {
        {0, 10, 20, 0, 0, 0},
        {10, 0, 0, 50, 10, 0},
        {20, 0, 0, 20, 33, 0},
        {0, 50, 20, 0, 20, 2},
        {0, 10, 33, 20, 0, 1},
        {0, 0, 0, 2, 1, 0}};
    Dijkstra(graph, 0, V);
    return 0;
}
